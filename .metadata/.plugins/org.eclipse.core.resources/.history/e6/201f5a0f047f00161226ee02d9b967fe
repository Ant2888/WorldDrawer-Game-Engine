package displays;

import java.util.List;
import java.util.PriorityQueue;

import controls.Game;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyCode;
import levels.LevelArbiter;

public class WorldManager extends PriorityQueue<WorldTemplate>{
	private static final long serialVersionUID = 1L;
	
	//The structure for adding levels:
	//Add a levels to the LEVELS enum
	//Give it an arbitrary int
	//place it in the set level switch following the already placed examples
	//Give the level an appropriate floatgrid 
	//then in the menu/prev level simply call its WM's setLevel method and profit (hence LEVELS is public)
	
	private GraphicsContext g;
	private Game game;
	private Canvas canvas;
	private LevelArbiter levels;
	
	public WorldManager(GraphicsContext g, Game game, Canvas canvas) {
		this.g = g;
		this.game = game;
		this.canvas = canvas;
		initArbiters();
		//setLevel(LEVELS.CLEAN_LINE);
	}
	
	private void initArbiters(){
		levels = new LevelArbiter(this);
	}
	
	public void update(double delta){
		this.peek().update(delta);
	}
	
	public void draw(int frames, GraphicsContext g){
		this.peek().draw(frames, g);
	}
	
	public void draw(int frames){
		draw(frames, g);
	}
	
	public void draw(){
		draw(0,g);
	}

	public void setLevel(Class<? extends WorldTemplate> level){
		this.add(levels.initAndAdd(level));
	}
	
	public WorldTemplate pollWorld(){
		this.peek().prepForDelete(); //maybe kill the level in the arbiter?
		return this.poll();
	}
	
	public synchronized List<KeyCode> updateKeys(){
		return game.getKeys();
	}
	
	public Canvas getCanvas(){
		return canvas;
	}
	
	//eh probably don't want to do this
	public Game getGame(){
		return game;
	}
	
	public LevelArbiter getLevelArbiter(){
		return levels;
	}
}
