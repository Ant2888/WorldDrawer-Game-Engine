package displays;

import java.util.ArrayList;

import controls.Game;
import displays.WorldManager.LEVELS;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import maths.Coordinate;

public class DottedLineWorld extends WorldTemplate{

	private ArrayList<Coordinate> points;
	private EventHandler<MouseEvent> events;

	public DottedLineWorld(WorldManager wm) {
		super(wm, null);
	}

	private volatile double delay = 0;
	@Override
	public void update(double tickDelta) {
		if(delay>=100){
			synchronized (points) {
				boolean hasCtrl = false, hasZ = false;
				for(KeyCode e: wm.updateKeys()){
					if(e == KeyCode.CONTROL) hasCtrl = true;
					if(e == KeyCode.Z) hasZ = true;
					if(e == KeyCode.ENTER){
						wm.setLevel(DottedLineWorld.class);
						delay = 0;
					}
				}
				if(hasCtrl && hasZ) {
					points.clear();
					delay = 0;
				}
			}
		}
		delay += tickDelta;
	}


	@Override
	public void draw(int prevFrames, GraphicsContext g) {
		g.setFill(Color.BLACK);
		g.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
		g.setFill(Color.WHITE);
		for(Coordinate c: points){
			g.fillRect(c.x, c.y, 2, 4);
		}
	}

	@Override
	public void prepForDelete(){
		Platform.runLater(new Runnable(){
			@Override
			public void run() {
				wm.getCanvas().removeEventHandler(MouseEvent.MOUSE_DRAGGED, events);
				wm.getCanvas().getGraphicsContext2D().setFill(Color.WHITE);
				wm.getCanvas().getGraphicsContext2D().fillRect(0, 0, Game.WIDTH, Game.HEIGHT);
			}
		});
	}

	private void addMouse(){
		events = new EventHandler<MouseEvent>(){
			public void handle(MouseEvent event) {
				if(event.getEventType() == MouseEvent.MOUSE_DRAGGED){
					points.add(new Coordinate(event.getX(), event.getY()));
				}
			}
		};
		wm.getCanvas().setOnMouseDragged(events);
	}


	@Override
	public void allocateResources() {
		points = new ArrayList<>();
		addMouse();
	}

}
