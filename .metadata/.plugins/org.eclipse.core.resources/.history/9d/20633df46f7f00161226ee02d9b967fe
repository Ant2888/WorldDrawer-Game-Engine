package levels;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Queue;

import displays.WorldTemplate;

public class WorldQueue implements Queue<WorldTemplate>{

	private WorldTemplate arr[];
	private int size;
	private float defaultLoadFactor = 0.75f;
	
	public WorldQueue() {
		arr = new WorldTemplate[2];
	}
	
	public WorldQueue(int size) {
		arr = new WorldTemplate[size];
	}
	
	public WorldQueue(int size, float loadFactor) {
		arr = new WorldTemplate[size];
		defaultLoadFactor = loadFactor;
	}
	
	@Override
	public int size() {
		return size;
	}

	@Override
	public boolean isEmpty() {
		return size == 0;
	}

	@Override
	public boolean contains(Object o) {
		if(o instanceof WorldTemplate){
			WorldTemplate otemp = (WorldTemplate)o;
			for(int i=0; i<size; i++){
				if(arr[i] == otemp)
					return true;
			}
		}
		//only contains templates
		return false;
	}

	@Override
	public Object[] toArray() {
		return arr;
	}

	@Override
	public boolean remove(Object o) {
		for(int i=0; i<size; i++){
			if(arr[i] == o)
				return delete(i);
		}
		return false;
	}
	
	private boolean delete(int index){
		try{
			arr[index] = null;
			size--;
			fixSizeDelete(index);
			return true;
		}catch(IndexOutOfBoundsException e){}
		return false;
	}
	
	private void fixSizeDelete(int emptyIndex){
		for(int i=emptyIndex; (i+1)<arr.length; i++){
			arr[i] = arr[i+1];
		}
	}

	@Override
	public boolean addAll(Collection<? extends WorldTemplate> c) {
		for(WorldTemplate wt: c){
			add(wt);
		}
		return true;
	}

	@Override
	public boolean add(WorldTemplate e) {
		prepSizeAdd();
		arr[0] = e;
		size++;
		return true;
	}
	
	//not safe
	private void fixSizeAdd(){
		for(int i=0; (i+1)<arr.length; i++){
			arr[i+1] = arr[i];
		}
	}
	
	private void prepSizeAdd(){
		if(size+1 >= arr.length*defaultLoadFactor){
			resize();
		}else{
			fixSizeAdd();
		}
	}
	
	private void resize(){
		WorldTemplate[] nxtArr = new WorldTemplate[2*arr.length+1];
		for(int i=0; i<arr.length; i++){
			nxtArr[i+1] = arr[i];
		}
		arr = nxtArr;
	}

	@Override
	public boolean removeAll(Collection<?> c) {
		for(Object obj: c){
			if(contains(obj))
				remove(obj);
		}
		return true;
	}

	@Override
	public void clear() {
		arr = new WorldTemplate[arr.length];
		size = 0;
	}

	@Override
	public WorldTemplate poll() {
		if(size > 0){
			WorldTemplate wt = arr[0];
			return delete(0) ? wt : null;
		}
		return null;
	}

	@Override
	public WorldTemplate peek() {
		return size == 0 ? null : arr[0];
	}

	// Will fill this out later
	@Override
	public Iterator<WorldTemplate> iterator() {
		return new Iterator<WorldTemplate>(){

			@Override
			public boolean hasNext() {
				// TODO Auto-generated method stub
				return false;
			}

			@Override
			public WorldTemplate next() {
				// TODO Auto-generated method stub
				return null;
			}
			
		};
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> T[] toArray(T[] a) {
		if(a.length >= size){
			for(int i=0; i<size; i++){
				a[i] = (T) arr[i];
			}
			return a;
		}
		T[] remaining = (T[])(new Object[size-a.length]);
		for(int i=0; i<size; i++){
			if(i < a.length)
				a[i] = (T) arr[i];
			else
				remaining[i] = (T) arr[i];
		}
		return remaining;
	}

	@Override
	public boolean containsAll(Collection<?> c) {
		for(Object obj: c){
			if(!contains(obj))
				return false;
		}
		return true;
	}

	@Override
	public boolean retainAll(Collection<?> c) {
		ArrayList<WorldTemplate> toKeep = new ArrayList<>();
		for(Object o: c){
			if(contains(o)){
				toKeep.add((WorldTemplate)o); //can't traditionally fail
			}
		}
		if(toKeep.isEmpty())
			return false;
		arr = new WorldTemplate[arr.length];
		size = 0;
		addAll(toKeep);
		return true;
	}

	@Override
	public boolean offer(WorldTemplate e) {
		if(size+1 >= arr.length*defaultLoadFactor)
			return false;
		return add(e);
	}

	@Override
	public WorldTemplate remove() throws IndexOutOfBoundsException{
		if(size == 0)
			throw new IndexOutOfBoundsException();
		
		WorldTemplate wt = arr[0];
		delete(0);
		return wt;
	}

	@Override
	public WorldTemplate element() throws IndexOutOfBoundsException{
		if(size == 0)
			throw new IndexOutOfBoundsException();
		
		return arr[0];
	}

}
